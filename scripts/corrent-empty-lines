#!/usr/bin/perl

use strict;
use warnings;

sub spacelength {
	my ($line) = @_;
	if ($line =~ /^([\s\t]+)/) {
		return length($1);
	}
	else {
		return 0;
	}
}

sub nonspacelength {
	my ($line) = @_;
	return length($line) - spacelength($line);
}

sub copyright_lines {
	return (map { $_."\n" } split (/\r?\n/, qq{#region Copyright

/*
 * Copyright (c) 2013-2014 Tobias Schulz, Maximilian Reuter, Pascal Knodel,
 *                         Gerd Augsburg, Christina Erler, Daniel Warzel
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#endregion
}));
}

my @files = split (/[\r\n]+/, `find -name "*.cs" -or -name "*.template"`);

my $prev_in_using = "";
my $in_using = "";
foreach my $file (@files) {
	print $file."\n";
	open my $fh, "<", $file;
	my @orig_lines = <$fh>;
#	@orig_lines = map { s/[\r\n]+$//gm; $_ } @orig_lines;
	close $fh;

	my @lines_above_copyright_notice = ();
	while (my $line = shift @orig_lines) {
		if ($line =~ /^[#]endregion\s*$/) { # if ($line =~ /^\s[*]\/\s*$/) {
			@lines_above_copyright_notice = ();
			last;
		}
		push @lines_above_copyright_notice, $line;
	}
	unshift @orig_lines, @lines_above_copyright_notice;

	my @lines = ();
	while (my $line = shift @orig_lines) {
		if ($line =~ /^using Microsoft/i) {
			$in_using = "xna";
		}
		elsif ($line =~ /^using Knot/i) {
			$in_using = "knot";
		}
		elsif ($line =~ /^using System/i) {
			$in_using = "system";
		}
		elsif ($line =~ /^using /i) {
			$in_using = "other";
		}
		else {
			$in_using = "";
		}

		if ($prev_in_using && length($line) < 3) {
			next;
		}

		chomp(my $_line = $line);
#		print "# $in_using ne $prev_in_using: $_line\n";
		if ($in_using ne $prev_in_using && $prev_in_using) {
			push @lines, "\n";
		}
		push @lines, $line;

		$prev_in_using = $in_using;
	}

	for (my $i = 0; $i < @lines; ++$i) {
		if ($lines[$i-1] =~ /^\s*[{]\s*$/ && nonspacelength($lines[$i]) == 0) {# && spacelength($lines[$i]) > spacelength($lines[$i-1])) {
			$lines[$i] = "FUCK";
		}
		if ($lines[$i+1] =~ /^\s*[}]\s*$/ && nonspacelength($lines[$i]) == 0) {# && spacelength($lines[$i]) > spacelength($lines[$i+1])) {
			$lines[$i] = "FUCK";
		}
		if ($lines[$i-1] =~ /[{]\s*$/ && $lines[$i-1] !~ /[}]/ && nonspacelength($lines[$i]) == 0) {# && spacelength($lines[$i]) > spacelength($lines[$i-1])) {
			$lines[$i] = "FUCK";
		}
		if ($lines[$i+1] =~ /[}].?.?.?\s*$/ && $lines[$i+1] !~ /[{]/ && nonspacelength($lines[$i]) == 0) {# && spacelength($lines[$i]) > spacelength($lines[$i+1])) {
			$lines[$i] = "FUCK";
		}
		if ($lines[$i-1] =~ /[(]\s*$/ && $lines[$i-1] !~ /[)]/ && nonspacelength($lines[$i]) == 0) {# && spacelength($lines[$i]) > spacelength($lines[$i-1])) {
			$lines[$i] = "FUCK";
		}
		if ($lines[$i+1] =~ /[)].?.?.?\s*$/ && $lines[$i+1] !~ /[(]/ && nonspacelength($lines[$i]) == 0) {# && spacelength($lines[$i]) > spacelength($lines[$i+1])) {
			$lines[$i] = "FUCK";
		}
		if ($lines[$i-2] =~ /[=][>]\s*$/ && $lines[$i-1] =~ /^\s*[{]\s*$/ && $lines[$i] =~ /^\s*[}][;]\s*$/) {
			chomp $lines[$i-2];
			$lines[$i-2] .= "{};\n";
			$lines[$i-1] = "FUCK";
			$lines[$i] = "FUCK";
		}
		if ($lines[$i-1] =~ /[=][>]\s*$/ && $lines[$i] =~ /^\s*[{][}][;]\s*$/) {
			chomp $lines[$i-1];
			$lines[$i-1] .= "{};\n";
			$lines[$i] = "FUCK";
		}
		if (nonspacelength($lines[$i+1]) == 0 && nonspacelength($lines[$i]) == 0) {
			$lines[$i] = "FUCK";
		}
		if ($lines[$i] =~ /using Microsoft.VisualStudio.TestTools.UnitTesting/) {
			$lines[$i] = "using NUnit.Framework;\n";
		}
		$lines[$i] =~ s/TestClass/TestFixture/gm;
		$lines[$i] =~ s/\[TestMethod\]/\[Test\]/gm;
		$lines[$i] =~ s/([a-zA-Z0-9])\(/$1 (/gm;
	}
	@lines = grep {!/FUCK/} @lines;

	@lines = map { if (/Log.Debug/) { s/.ToString.?\(\)//gm; s/[+]/,/gm; s/\s*?[,]/,/gm; }; $_ } @lines;

	@lines = grep {!/Microsoft.VisualStudio.TestTools/} @lines;

	open my $fh, ">", $file;
	print $fh join('', copyright_lines(), @lines);
	close $fh;
}
